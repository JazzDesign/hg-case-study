{"version":3,"sources":["redux/filterSlice.js","redux/store.js","components/Header.js","components/Filters.js","components/Table.js","components/Results.js","containers/App.js","index.js"],"names":["filterSlice","createSlice","name","initialState","continent","metric","max","reducers","updateContinent","state","action","payload","updateMetric","updateMax","actions","configureStore","reducer","filter","filterReducer","Header","title","onClick","className","selectContinent","selectMetric","selectMax","Filters","enable","continents","dispatchContinent","useDispatch","dispatchMetric","dispatchMax","useSelector","value","disabled","onChange","e","target","map","Table","data","onOrder","useState","toggleAsc","setToggleAsc","handleOrder","getValues","sumValues","item","parseInt","element","geonameId","countryName","population","areaInSqKm","colSpan","Results","filterData","handleOptions","maxValues","slice","series","push","y","others","otherData","length","other","getOthers","chart","plotBackgroundColor","plotBorderWidth","plotShadow","type","text","tooltip","pointFormat","accessibility","point","valueSuffix","plotOptions","pie","allowPointSelect","cursor","dataLabels","enabled","format","highcharts","HighCharts","options","App","arr","setData","setEnable","fetchData","a","fetch","res","json","uniqueContinents","i","final","indexOf","geonames","getData","toggle","newData","sort","b","x","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.923239b4.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const filterSlice = createSlice({\n  name: 'filter',\n  initialState: {\n    continent: 'all',\n    metric: 'all',\n    max: '5',\n  },\n  reducers: {\n    updateContinent: (state, action) => {\n      state.continent = action.payload;\n    },\n    updateMetric: (state, action) => {\n      state.metric = action.payload;\n    },\n    updateMax: (state, action) => {\n      state.max = action.payload;\n    },\n  },\n});\n\nexport const { updateContinent, updateMetric, updateMax } = filterSlice.actions;\n\nexport default filterSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\nimport filterReducer from './filterSlice';\n\nexport default configureStore({\n  reducer: {\n    filter: filterReducer,\n  },\n});","import React from 'react';\nimport '../assets/styles/components/Header.css';\n\nexport function Header( { title, onClick }) {\n  return (\n    <div className=\"header\">\n      <h1>{title}</h1>\n      <button className=\"btn\" onClick={onClick}>GO</button>\n    </div>\n  )\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateContinent, updateMetric, updateMax } from '../redux/filterSlice';\nimport '../assets/styles/components/Filters.css';\n\nconst selectContinent = state => state.filter.continent;\nconst selectMetric = state => state.filter.metric;\nconst selectMax = state => state.filter.max;\n\nexport function Filters( { enable, continents }) {\n  const dispatchContinent = useDispatch();\n  const dispatchMetric = useDispatch();\n  const dispatchMax = useDispatch();\n\n  const continent = useSelector(selectContinent);\n  const metric = useSelector(selectMetric);\n  const max = useSelector(selectMax);\n\n  const handleContinent = (e) =>{\n    dispatchContinent(updateContinent(e.target.value));\n  }\n  const handleMetric = (e) =>{\n    dispatchMetric(updateMetric(e.target.value));\n  }\n  const handleMax = (e) => {\n    dispatchMax(updateMax(e.target.value));\n  }\n  return (\n    <div className=\"filters\">\n      <h3>Filters</h3>\n        <select value={continent} disabled={enable} onChange={handleContinent} >\n          <option value=\"all\">ALL</option>\n          {continents.map(continent => (\n            <option key={continent} value={continent}>{continent}</option>\n          ))}\n        </select>\n\n      <select disabled={enable} value={metric} onChange={handleMetric}>\n          <option value=\"all\">ALL</option>\n          <option value=\"areaInSqKm\">areaInSqKm</option>\n          <option value=\"population\">Population</option>\n        </select>\n\n        <select disabled={enable} value={max} onChange={handleMax}>\n          <option value=\"5\">5</option>\n          <option value=\"10\">10</option>\n          <option value=\"15\">15</option>\n          <option value=\"20\">20</option>\n        </select>\n    </div>\n  )\n}\n","import React, { useState } from 'react';\nimport '../assets/styles/components/Table.css';\n\nexport function Table({ data, metric, onOrder }) {\n  const [toggleAsc, setToggleAsc] = useState(true);\n\n  const handleOrder = (value) => {\n    onOrder(toggleAsc, value);\n    setToggleAsc(!toggleAsc);\n  }\n\n  const getValues = (value) => {\n    let sumValues = 0;\n    for (let item in data) {\n      sumValues += parseInt(data[item][value]);\n    }\n    return sumValues;\n  }\n\n  function tableHeader () {\n    return(\n      <tr>\n        <th><button onClick={() => handleOrder('continent')}>Continent Name</button></th>\n        <th><button onClick={() => handleOrder('countryName')}>Country Name</button></th>\n        {metric === 'all' ? (\n          <>\n            <th><button onClick={() => handleOrder('population')}>population</button></th>\n            <th><button onClick={() => handleOrder('areaInSqKm')}>areaInSqKm</button></th>\n          </>\n        ) : (\n\n            <th><button onClick={() => handleOrder(`${metric}`)}>{metric}</button></th>\n        )\n\n        }\n      </tr>\n    );\n  }\n\n  function tableData() {\n    return data.map(element => {\n      const { continent, geonameId, countryName, population, areaInSqKm } = element;\n      return(\n        <tr key={geonameId}>\n          <td>{continent}</td>\n          <td>{countryName}</td>\n          {metric === 'all' ? (\n            <>\n              <td>{population}</td>\n              <td>{areaInSqKm}</td>\n            </>\n          ) : (\n              <td>{element[metric]}</td>\n          )}\n        </tr>\n      );\n    })\n  }\n\n  return (\n    <div>\n      <table>\n        <thead>\n          {tableHeader()}\n        </thead>\n        <tbody>\n          {tableData()}\n        </tbody>\n        <tfoot>\n          <tr>\n            <td colSpan=\"2\"><strong>TOTAL</strong></td>\n            {metric === 'all' ? (\n              <>\n                <td>{getValues('population')}</td>\n                <td>{getValues('areaInSqKm')}</td>\n              </>\n            ) : (\n                <td>{getValues(`${metric}`)}</td>\n            )}\n          </tr>\n        </tfoot>\n      </table>\n    </div>\n  )\n}\n","import React from 'react';\nimport HighCharts from 'highcharts';\nimport HighChartsReact from 'highcharts-react-official';\nimport { Table } from './Table';\nimport '../assets/styles/components/Results.css';\n\n\n\nexport function Results( { data, continent, metric, max, onOrder }) {\n  const filterData = (continent === \"all\") ? data : data.filter(e => e.continent === continent)\n  const getMaxValues = () => {\n    const resultData = filterData.slice(0, max);\n    return resultData;\n  }\n\n  const getOthers = (value) => {\n\n    const otherData = filterData.slice(max, filterData.length);\n    let sumValues = 0;\n    for(let other in otherData){\n      sumValues += parseInt(otherData[other][value]);\n    }\n    return sumValues;\n  }\n  function handleOptions(value) {\n    const maxValues = getMaxValues();\n    const series = [];\n    maxValues.map(e => {\n      series.push({\n        name: e.countryName,\n        y: parseInt(e[value]),\n      });\n      return e;\n    })\n\n    const others = getOthers(value);\n    series.push({\n      name: 'Others',\n      y: others,\n    });\n\n    const options = {\n      chart: {\n        plotBackgroundColor: null,\n        plotBorderWidth: null,\n        plotShadow: false,\n        type: 'pie'\n      },\n      title: {\n        text: `Results ${value}`\n      },\n      tooltip: {\n        pointFormat: '{series.name}: <b>{point.percentage:.1f} %</b>'\n      },\n      accessibility: {\n        point: {\n          valueSuffix: '%'\n        }\n      },\n      plotOptions: {\n        pie: {\n          allowPointSelect: true,\n          cursor: 'pointer',\n          dataLabels: {\n            enabled: true,\n            format: '<b>{point.name}</b>: {point.percentage:.1f} %'\n          }\n        }\n      },\n      series: [\n        {\n          name: `${value}`,\n          data: series\n        }\n      ]\n    };\n\n    return options;\n  }\n\n\n  return (\n    <div className=\"results\">\n      {(metric === 'all') ? (\n        <div className=\"chart-container\">\n          <HighChartsReact highcharts={HighCharts} options={handleOptions('population')} />\n          <HighChartsReact highcharts={HighCharts} options={handleOptions('areaInSqKm')} />\n        </div>\n      ) : (\n          <HighChartsReact highcharts={HighCharts} options={handleOptions(metric)} />\n      )\n      }\n      {(continent === 'all') ? (\n        <Table data={data} metric={metric} onOrder={onOrder}/>\n      ) : (\n          <Table data={filterData} metric={metric} onOrder={onOrder} />\n      )}\n    </div>\n  )\n}\n","import '../assets/styles/App.css';\nimport { useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { Header } from '../components/Header';\nimport { Filters } from '../components/Filters';\nimport { Results } from '../components/Results';\n\n\nconst selectContinent = state => state.filter.continent;\nconst selectMetric = state => state.filter.metric;\nconst selectMax = state => state.filter.max;\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [enable, setEnable] = useState(true);\n\n\n  const headerTitle = 'Frontend Dev CS';\n  const continent = useSelector(selectContinent);\n  const metric = useSelector(selectMetric);\n  const max = useSelector(selectMax);\n\n  const fetchData = async () => {\n    const res = await fetch('http://api.geonames.org/countryInfoJSON?formatted=true&username=hydrane');\n    const data = res.json();\n\n    return data;\n  }\n\n  const handleFetch = (e) => {\n    const getData = async () => {\n      const data = await fetchData();\n      setData(data.geonames);\n    }\n    getData();\n    setEnable(false);\n  }\n\n  const getContinents = (arr, value) => {\n    const uniqueValues = arr\n      .map(e => e[value])\n      .map((e, i, final) => final.indexOf(e) === i && i)\n      .filter(e => arr[e])\n      .map(e => arr[e]);\n    return uniqueValues;\n  }\n\n  const uniqueContinents = getContinents(data, 'continent').map(e => e.continent);\n\n  const onOrder = (toggle, value) => {\n    const newData = data.sort((a, b) => {\n      const x = a[value];\n      const y = b[value];\n      return (toggle ? x > y : x < y);\n    })\n    setData(newData);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header title={headerTitle} onClick={handleFetch} />\n      <Filters enable={enable} continents={uniqueContinents} />\n      {data.length > 0 &&\n        <Results data={data} continent={continent} metric={metric} max={max} onOrder={onOrder} />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport './assets/styles/index.css';\nimport App from './containers/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}